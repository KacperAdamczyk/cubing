---
import { CasesList } from "@/components/CasesList";
import type { Items } from "@/components/SetList.astro";
import SetList from "@/components/SetList.astro";
import Layout from "@/layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
  const sets = await getCollection("sets");

  return sets.map((set) => ({
    params: { setId: set.id },
    props: { set: set.data },
  }));
}) satisfies GetStaticPaths;

const { setId } = Astro.params;
const { set } = Astro.props;

const subsets = await Promise.all(
  (
    await getCollection("subsets", (subset) => subset.data.setId.id === setId)
  ).map(async (subset) => {
    const cases = await getCollection(
      "cases",
      (currentCase) => currentCase.data.subsetId.id === subset.id,
    );

    return {
      subset: subset.data,
      cases: cases.map((currentCase) => currentCase.data),
    };
  }),
);

const allCases = await Promise.all(
  subsets.flatMap(({ subset, cases }) => {
    return cases.map(async (currentCase) => {
      const algorithms = await getCollection(
        "algorithms",
        (algorithm) => algorithm.data.caseId.id === currentCase.id,
      );

      return {
        ...currentCase,
        subset,
        algorithms: algorithms.map((algorithm) => algorithm.data),
      };
    });
  }),
);

const items: Items = [
  {
    href: "/",
    name: "All",
    previewAlgorithm: "",
    size: allCases.length,
    viewType: set.viewType,
  },
  ...subsets.map(({ subset, cases }) => ({
    href: `/${subset.id}`,
    name: subset.name,
    previewAlgorithm: subset.previewAlgorithm,
    size: cases.length,
    viewType: subset.viewType,
  })),
];
---

<Layout>
  <SetList items={items} />
  <div class="mt-2 flex flex-col gap-2">
    <CasesList cases={allCases} slim />
  </div>
</Layout>
