---
import { CasesList } from "@/components/CasesList";
import PreviewList, { type Items } from "@/components/PreviewList.astro";
import { getBreadcrumbs } from "@/helpers/getBreadcrumbs";
import Layout from "@/layouts/Layout.astro";
import { getSetCases } from "@/queries/getSetCases";
import { getSetSubsets } from "@/queries/getSetSubsets";
import { getSubsetCases } from "@/queries/getSubsetCases";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
  const sets = await getCollection("sets");

  return (
    await Promise.all(
      sets.map(async ({ data: set }) => {
        const subsets = await getSetSubsets(set.id);

        return subsets.map((subset) => ({
          params: { setId: set.id, subsetId: subset.id },
          props: { set, subset, subsets },
        }));
      }),
    )
  ).flat();
}) satisfies GetStaticPaths;

const { setId, subsetId } = Astro.params;
const { set, subset, subsets } = Astro.props;

const cases = await getSubsetCases(subsetId);
const items: Items = await Promise.all([
  {
    href: `/${set.id}`,
    name: "All",
    previewAlgorithm: "",
    size: (await getSetCases(setId)).length,
    viewType: set.viewType,
  },
  ...subsets.map(async ({ id, name, previewAlgorithm }) => ({
    href: `/${set.id}/${id}`,
    name: name,
    previewAlgorithm: previewAlgorithm,
    size: (await getSubsetCases(id)).length,
    viewType: set.viewType,
  })),
]);
---

<Layout breadcrumbs={getBreadcrumbs({ set, subset })}>
  <PreviewList items={items} />
  <div class="mt-2 flex flex-col gap-2">
    <CasesList cases={cases} slim />
  </div>
</Layout>
